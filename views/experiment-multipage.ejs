<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= experiment.title || 'Decision Making Study' %></title>
    <link rel="stylesheet" href="/style.css">
    <style>
        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }

        .experiment-container {
            background-color: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
        }

        .page {
            display: none;
            margin: 30px 0;
            padding: 20px;
            border: 2px solid #ddd;
            border-radius: 8px;
            background-color: #fafafa;
            min-height: 300px;
        }

        .page.active {
            display: block;
        }

        .page-content {
            font-family: "Times New Roman", serif;
            font-size: 14px;
            line-height: 1.6;
            color: #333;
        }

        .choice-buttons {
            display: flex;
            gap: 15px;
            justify-content: center;
            margin: 20px 0;
            flex-wrap: wrap;
        }

        .choice-buttons button {
            padding: 10px 20px;
            font-size: 16px;
            border: 2px solid #007bff;
            background-color: white;
            color: #007bff;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s;
        }

        .choice-buttons button:hover {
            background-color: #007bff;
            color: white;
        }

        .choice-buttons button.selected {
            background-color: #007bff;
            color: white;
        }

        .next-button {
            margin: 20px auto;
            padding: 12px 30px;
            background-color: #28a745;
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
            display: block;
        }

        .next-button:hover {
            background-color: #218838;
        }

        .next-button:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }

        .radio-group {
            display: flex;
            flex-direction: column;
            gap: 10px;
            margin: 15px 0;
        }

        .radio-group label {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .progress {
            background-color: #e9ecef;
            border-radius: 10px;
            margin-bottom: 20px;
            height: 20px;
        }

        .progress-bar {
            background-color: #007bff;
            height: 100%;
            border-radius: 10px;
            transition: width 0.3s;
        }

        .question-number {
            color: #666;
            font-size: 14px;
            margin-bottom: 10px;
        }


        .error {
            color: #dc3545;
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            padding: 10px;
            border-radius: 5px;
            margin: 10px 0;
        }

        /* Font conditions */
        .hard-font {
            font-family: "Times New Roman", serif;
            font-style: italic;
            color: #666;
            text-shadow: 2px 2px 0px #ccc;
        }

        /* Apply hard font to radio button labels when in hard font condition */
        .hard-font .radio-group label {
            font-family: "Times New Roman", serif;
            font-style: italic;
            color: #666;
            text-shadow: 2px 2px 0px #ccc;
        }

        .input-field {
            padding: 8px; 
            border: 1px solid #ddd; 
            border-radius: 4px; 
            font-size: 14px; 
            margin: 15px 0;
            width: 100%;
            max-width: 300px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="experiment-container">
            <div class="header">
                <h1><%= experiment.title || 'Decision Making Study' %></h1>
                <div class="progress">
                    <div class="progress-bar" id="progress-bar" style="width: 0%;"></div>
                </div>
            </div>

            <!-- Dynamic pages will be rendered here by JavaScript -->
            <div id="page-container"></div>
        </div>
    </div>

    <script>
        let currentPage = 0;
        let pageOrder = [];
        let allPages = [];
        let responses = {};
        let startTime = new Date();
        
        // Experiment configuration from server
        const experiment = <%- JSON.stringify(experiment) %>;
        const fontCondition = '<%= fontCondition %>';
        const workerId = '<%= workerId %>';
        const assignmentId = '<%= assignmentId %>';
        const hitId = '<%= hitId %>';
        const turkSubmitTo = '<%= turkSubmitTo || "" %>';
        
        // Generate page ordering
        function generatePageOrder() {
            if (experiment.pageOrdering) {
                // New structured ordering system
                let orderedPages = [];
                
                // Add fixed pages in order
                if (experiment.pageOrdering.fixed) {
                    experiment.pageOrdering.fixed
                        .sort((a, b) => (a.order || 0) - (b.order || 0))
                        .forEach(page => {
                            orderedPages.push(page);
                        });
                }
                
                // Shuffle randomizable pages
                let randomizablePages = [];
                if (experiment.pageOrdering.randomizable) {
                    randomizablePages = shuffleArray([...experiment.pageOrdering.randomizable]);
                }
                
                // Handle constrained pages
                let constrainedPages = [];
                if (experiment.pageOrdering.constrained) {
                    constrainedPages = [...experiment.pageOrdering.constrained];
                }
                
                // Merge randomizable pages into the sequence
                let finalOrder = [...orderedPages];
                
                // Add randomizable pages after fixed pages
                finalOrder = finalOrder.concat(randomizablePages);
                
                // Insert constrained pages respecting their constraints
                constrainedPages.forEach(constrainedPage => {
                    if (constrainedPage.constraints && constrainedPage.constraints.minSeparationFromPage) {
                        const targetPageId = constrainedPage.constraints.minSeparationFromPage;
                        const targetIndex = finalOrder.findIndex(p => p.id === targetPageId);
                        const minSeparation = constrainedPage.constraints.minSeparationCount || 1;
                        
                        if (targetIndex !== -1) {
                            const insertIndex = Math.min(
                                targetIndex + minSeparation + 1,
                                finalOrder.length
                            );
                            finalOrder.splice(insertIndex, 0, constrainedPage);
                        } else {
                            finalOrder.push(constrainedPage);
                        }
                    } else {
                        finalOrder.push(constrainedPage);
                    }
                });
                
                // Add completion page
                finalOrder.push({
                    id: 'completion',
                    type: 'completion',
                    title: 'Study Complete'
                });
                
                return finalOrder;
            } else {
                // Legacy page system
                let pages = [];
                if (experiment.pages) {
                    pages = experiment.pages.map(page => ({...page}));
                }
                pages.push({
                    id: 'completion',
                    type: 'completion',
                    title: 'Study Complete'
                });
                return pages;
            }
        }
        
        function shuffleArray(array) {
            const shuffled = [...array];
            for (let i = shuffled.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
            }
            return shuffled;
        }
        
        function renderPage(page, pageIndex, totalPages) {
            const pageDiv = document.createElement('div');
            pageDiv.id = `page-${page.id}`;
            pageDiv.className = 'page';
            if (pageIndex === 0) pageDiv.classList.add('active');
            
            let content = '';
            
            if (page.type === 'completion') {
                content = `
                    <h3>Study Complete - Thank You!</h3>
                    <div id="completion-content">
                        <div style="background-color: #d4edda; border: 1px solid #c3e6cb; padding: 20px; border-radius: 5px; margin: 20px 0; text-align: center;">
                            <h4 style="color: #155724; margin-top: 0;">Your Completion Code:</h4>
                            <div style="font-size: 24px; font-weight: bold; color: #155724; background-color: white; padding: 10px; border: 2px solid #28a745; border-radius: 5px; margin: 10px 0;">
                                <span id="completion-code">Processing...</span>
                            </div>
                        </div>
                        
                        ${experiment.completionMessage ? `
                            <div style="margin-top: 20px; padding: 15px; background-color: #f8f9fa; border-radius: 5px; border: 1px solid #dee2e6;">
                                ${experiment.completionMessage}
                            </div>
                        ` : ''}
                        
                        <div style="text-align: center; margin-top: 30px;">
                            <form id="amt-form" method="POST" target="_top" action="">
                                <input type="hidden" name="assignmentId" value="${assignmentId}">
                                <input type="hidden" name="completion_code" id="form-completion-code">
                                <button type="submit" style="background-color: #28a745; color: white; border: none; padding: 15px 30px; font-size: 18px; border-radius: 5px; cursor: pointer;">
                                    Submit to Amazon Mechanical Turk
                                </button>
                            </form>
                            <p style="margin-top: 10px; color: #666; font-size: 14px;">Click the button above to submit your work and receive payment.</p>
                            <div id="submission-instructions" style="display: none; margin-top: 20px; padding: 15px; background-color: #fff3cd; border: 1px solid #ffeaa7; border-radius: 5px;">
                                <p><strong>If the submission button doesn't work:</strong></p>
                                <ol style="text-align: left; margin: 10px 0;">
                                    <li>Copy your completion code: <strong id="manual-code"></strong></li>
                                    <li>Close this tab/window</li>
                                    <li>Return to the MTurk interface</li>
                                    <li>Paste the completion code in the provided field</li>
                                    <li>Submit your assignment</li>
                                </ol>
                            </div>
                        </div>
                    </div>
                `;
            } else {
                const questionNumber = pageIndex < totalPages - 1 ? `Question ${pageIndex + 1} of ${totalPages - 1}` : '';
                
                // Apply font condition to all experimental content pages
                const fontClass = (fontCondition === 'hard') ? 'hard-font' : '';
                
                content = `
                    ${questionNumber ? `<div class="question-number">${questionNumber}</div>` : ''}
                    <h3>${page.title}</h3>
                    <div class="page-content ${fontClass}">
                        ${page.content || ''}
                    </div>
                `;
                
                // Add input controls based on page type
                if (page.type === 'choice') {
                    content += '<div class="choice-buttons">';
                    page.choices.forEach(choice => {
                        content += `<button onclick="selectChoice('${page.id}', '${choice.value}')">${choice.label}</button>`;
                    });
                    content += '</div>';
                } else if (page.type === 'radio') {
                    content += '<div class="radio-group">';
                    page.choices.forEach(choice => {
                        content += `
                            <label>
                                <input type="radio" name="${page.id}" value="${choice.value}" onchange="handleRadioChange('${page.id}')">
                                ${choice.label}
                            </label>
                        `;
                    });
                    content += '</div>';
                } else if (page.type === 'input') {
                    content += `
                        <input type="${page.inputType || 'text'}" 
                               id="input-${page.id}" 
                               class="input-field"
                               placeholder="Enter your answer"
                               oninput="handleInputChange('${page.id}')"
                               ${page.correctAnswer ? `data-correct-answer="${page.correctAnswer}"` : ''}>
                    `;
                } else if (page.type === 'info') {
                    // Info pages don't need input controls
                }
                
                // Add continue button (except for info pages without required input)
                if (page.type !== 'info' || page.required !== false) {
                    const disabled = page.type === 'info' ? '' : 'disabled';
                    content += `<button class="next-button" onclick="nextPage()" ${disabled}>Continue</button>`;
                }
            }
            
            pageDiv.innerHTML = content;
            return pageDiv;
        }
        
        function initializeExperiment() {
            allPages = generatePageOrder();
            const container = document.getElementById('page-container');
            
            // Render all pages
            allPages.forEach((page, index) => {
                const pageElement = renderPage(page, index, allPages.length);
                container.appendChild(pageElement);
            });
            
            updateProgress();
        }
        
        function showPage(pageIndex) {
            document.querySelectorAll('.page').forEach(page => {
                page.classList.remove('active');
            });
            
            const targetPage = document.querySelectorAll('.page')[pageIndex];
            if (targetPage) {
                targetPage.classList.add('active');
            }
            
            updateProgress();
        }
        
        function updateProgress() {
            const progress = (currentPage / (allPages.length - 1)) * 100;
            document.getElementById('progress-bar').style.width = progress + '%';
        }
        
        function nextPage() {
            if (!validateCurrentPage()) {
                return;
            }
            
            currentPage++;
            if (currentPage < allPages.length) {
                showPage(currentPage);
                
                if (allPages[currentPage].id === 'completion') {
                    handleCompletion();
                }
            }
        }
        
        function validateCurrentPage() {
            const currentPageData = allPages[currentPage];
            
            // Skip validation for info pages
            if (currentPageData.type === 'info') {
                return true;
            }
            
            // Check if page is required
            if (currentPageData.required === false) {
                return true;
            }
            
            // Validate based on page type
            if (currentPageData.type === 'choice' || currentPageData.type === 'radio') {
                if (!responses[currentPageData.id]) {
                    showError('Please select an option before continuing.');
                    return false;
                }
            } else if (currentPageData.type === 'input') {
                const input = document.getElementById(`input-${currentPageData.id}`);
                if (!input || !input.value.trim()) {
                    showError('Please provide an answer before continuing.');
                    return false;
                }
                
                // Validate attention check
                if (currentPageData.correctAnswer) {
                    const userAnswer = parseInt(input.value.trim());
                    if (userAnswer !== currentPageData.correctAnswer) {
                        showError('Incorrect answer. Please try again.');
                        return false;
                    }
                }
            }
            
            return true;
        }
        
        function selectChoice(questionId, choice) {
            responses[questionId] = choice;
            
            const page = document.querySelector('.page.active');
            const buttons = page.querySelectorAll('.choice-buttons button');
            buttons.forEach(btn => btn.classList.remove('selected'));
            event.target.classList.add('selected');
            
            const nextBtn = page.querySelector('.next-button');
            if (nextBtn) nextBtn.disabled = false;
        }
        
        function handleRadioChange(questionId) {
            const selectedOption = document.querySelector(`input[name="${questionId}"]:checked`);
            if (selectedOption) {
                responses[questionId] = selectedOption.value;
                const page = document.querySelector('.page.active');
                const nextBtn = page.querySelector('.next-button');
                if (nextBtn) nextBtn.disabled = false;
            }
        }
        
        function handleInputChange(questionId) {
            const input = document.getElementById(`input-${questionId}`);
            if (input && input.value.trim()) {
                responses[questionId] = input.value.trim();
                const page = document.querySelector('.page.active');
                const nextBtn = page.querySelector('.next-button');
                if (nextBtn) nextBtn.disabled = false;
            }
        }
        
        function showError(message) {
            const existingError = document.querySelector('.error');
            if (existingError) {
                existingError.remove();
            }
            
            const errorDiv = document.createElement('div');
            errorDiv.className = 'error';
            errorDiv.textContent = message;
            
            const activePage = document.querySelector('.page.active');
            activePage.insertBefore(errorDiv, activePage.firstChild);
        }
        
        async function handleCompletion() {
            try {
                const endTime = new Date();
                const completionTimeMs = endTime - startTime;
                
                const submissionData = {
                    workerId: workerId,
                    assignmentId: assignmentId,
                    hitId: hitId,
                    experimentId: experiment.experimentId,
                    fontCondition: fontCondition,
                    responses: responses,
                    completionTimeMs: completionTimeMs,
                    startTime: startTime.toISOString(),
                    endTime: endTime.toISOString()
                };
                
                const response = await fetch('/api/submit-multipage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(submissionData)
                });
                
                if (!response.ok) {
                    throw new Error('Failed to submit data');
                }
                
                const result = await response.json();
                document.getElementById('completion-code').textContent = result.completionCode;
                document.getElementById('form-completion-code').value = result.completionCode;
                document.getElementById('manual-code').textContent = result.completionCode;
                
                // Set up AMT form submission with protocol consistency fix
                const form = document.getElementById('amt-form');
                
                // Ensure HTTPS protocol consistency for MTurk submission
                let submitUrl;
                if (turkSubmitTo) {
                    // Ensure turkSubmitTo uses HTTPS
                    submitUrl = turkSubmitTo.replace(/^http:/, 'https:') + '/mturk/externalSubmit';
                } else {
                    submitUrl = 'https://workersandbox.mturk.com/mturk/externalSubmit';
                }
                
                form.action = submitUrl;
                
                // Simple submission handling - no automatic redirects
                form.addEventListener('submit', function(e) {
                    console.log('Form submitting to:', form.action);
                    // Show manual instructions only if form submission fails
                    setTimeout(() => {
                        document.getElementById('submission-instructions').style.display = 'block';
                    }, 8000);
                });
                
            } catch (error) {
                console.error('Error during completion:', error);
                document.getElementById('completion-code').textContent = 'ERROR - Please contact researcher';
                showError('Failed to submit your responses. Please contact the researcher.');
            }
        }
        
        // Initialize the experiment when page loads
        document.addEventListener('DOMContentLoaded', function() {
            initializeExperiment();
        });
    </script>
</body>
</html>